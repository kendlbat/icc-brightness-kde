#! /usr/bin/env python3
"""Control OLED display brightness by applying ICC color profiles.

icc-brightness brightness max-brightness - set brightness manually
icc-brightness apply - apply brightness from system setting
icc-brightness watch - continuously update to system setting
icc-brightness clean - remove all profiles generated by us
"""

import sys
import os
import subprocess
import time
import fcntl
import signal
import threading
import logging

PROFILE_FOLDER = os.path.expanduser('~/.local/share/icc/icc-brightness-kde')

DEVICE = os.getenv('ICC_DISPLAY_DEVICE', '1')
if DEVICE is None or DEVICE == '':
    devices = subprocess.run(['kscreen-doctor', 'output.list'], capture_output=True, text=True)
    if devices.returncode == 0:
        devices = devices.stdout.splitlines()
        if devices:
            DEVICE = devices[0].split('.')[0]  # Get the first device name
        else:
            DEVICE = '1'  # Fallback to default device


TEMP_FOLDER = '/tmp'
BACKLIGHT_PATH = '/sys/class/backlight/intel_backlight'
BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'brightness')
MAX_BRIGHTNESS_PATH = os.path.join(BACKLIGHT_PATH, 'max_brightness')

CWD = os.path.dirname(__file__)
ICC_BRIGHTNESS_GEN = os.path.join(CWD, 'icc-brightness-gen')

LOCK = threading.Lock()


def clean():
    for filename in os.listdir(PROFILE_FOLDER):
        if filename.startswith('brightness_') and filename.endswith('.icc'):
            filepath = os.path.join(PROFILE_FOLDER, filename)
            logging.info('Removing %s', filepath)
            os.remove(filepath)



def find_profile(filename):
    files = os.listdir(PROFILE_FOLDER)
    for file in files:
        if file == filename:
            return os.path.join(PROFILE_FOLDER, file)
    return None

last_icc_filename = None

def icc_brightness(brightness, max_brightness):

    icc_filename = 'brightness_%d_%d.icc' % (brightness, max_brightness)
    logging.debug('Apply profile %s', icc_filename)
    object_path = find_profile(icc_filename)
    if object_path is None:
        icc_filepath = os.path.join(PROFILE_FOLDER, icc_filename)
        subprocess.run([ICC_BRIGHTNESS_GEN, icc_filepath,
                        str(brightness), str(max_brightness)], check=True)

    subprocess.run(['kscreen-doctor', f'output.{DEVICE}.iccprofile.{os.path.join(PROFILE_FOLDER, icc_filename)}'], check=True)


def icc_brightness_apply():
    with open(BRIGHTNESS_PATH) as infile:
        brightness = int(infile.readline())
    with open(MAX_BRIGHTNESS_PATH) as infile:
        max_brightness = int(infile.readline())
    icc_brightness(brightness, max_brightness)


def handler(signum, frame):
    if LOCK.acquire(blocking=False):
        try:
            icc_brightness_apply()
        except subprocess.CalledProcessError as ex:
            logging.exception('Error during call to icc_brightness')
            logging.error(ex.stdout)
        except BaseException:
            logging.exception('Error during call to icc_brightness')
        finally:
            LOCK.release()


def main():
    if not os.path.exists(PROFILE_FOLDER):
        os.makedirs(PROFILE_FOLDER)

    logging.basicConfig(level=logging.INFO,
                        format='%(levelname)s: %(message)s')

    if len(sys.argv) == 2 and sys.argv[1] == 'clean':
        clean()

    elif len(sys.argv) == 2 and sys.argv[1] == 'apply':
        icc_brightness_apply()

    elif len(sys.argv) == 2 and sys.argv[1] == 'watch':
        try:
            icc_brightness_apply()
        except BaseException:
            logging.exception('device-make-profile-default')
        signal.signal(signal.SIGIO, handler)
        fd = os.open(BACKLIGHT_PATH, os.O_RDONLY)
        fcntl.fcntl(fd, fcntl.F_SETSIG, 0)
        fcntl.fcntl(fd, fcntl.F_NOTIFY, fcntl.DN_MODIFY| fcntl.DN_MULTISHOT)

        while True:
            time.sleep(1000000)

    elif len(sys.argv) == 3:
        brightness = int(sys.argv[1])
        max_brightness = int(sys.argv[2])
        icc_brightness(brightness, max_brightness)

    else:
        print(__doc__)


if __name__ == '__main__':
    main()
